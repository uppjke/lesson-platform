'use client';

import { useState } from 'react';
import { smartSupabaseClient, isDemoMode } from '@/lib/auth-client';
import { useRouter } from 'next/navigation';
import Link from 'next/link';

export default function LoginPage() {
    const [email, setEmail] = useState('');
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState(false);
    const router = useRouter();

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Magic Link
    const handleLogin = async () => {
        try {
            setLoading(true);
            setError(null);
            setSuccess(false);

            if (isDemoMode()) {
                console.log('üé≠ –î–ï–ú–û-–†–ï–ñ–ò–ú: –°–∏–º—É–ª—è—Ü–∏—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Magic Link');
                console.log('üìß Email:', email);

                // –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                const result = await smartSupabaseClient.auth.demoSignIn(email);

                if (result.error) {
                    throw new Error(result.error.message);
                }

                await new Promise(resolve => setTimeout(resolve, 1000));
                setSuccess(true);
                setTimeout(() => router.push('/dashboard'), 2000);
            } else {
                console.log('üöÄ PRODUCTION: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Magic Link');

                const { error: signInError } = await smartSupabaseClient.auth.signInWithOtp({
                    email,
                    options: {
                        emailRedirectTo: `${window.location.origin}/auth/callback`,
                    },
                });

                if (signInError) {
                    throw signInError;
                }

                setSuccess(true);
            }

        } catch (err: unknown) {
            const errorMessage = err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ';
            setError(errorMessage);
            setSuccess(false);
        } finally {
            setLoading(false);
        }
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        if (!email) {
            setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email');
            return;
        }

        await handleLogin();
    };

    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
            <div className="max-w-md w-full space-y-8">
                <div>
                    <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
                        –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
                    </h2>
                    <p className="mt-2 text-center text-sm text-gray-600">
                        –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —É—Ä–æ–∫–æ–≤
                    </p>
                </div>

                {/* –°—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ */}
                {isDemoMode() ? (
                    <div className="bg-blue-50 border border-blue-200 rounded-md p-4">
                        <div className="flex">
                            <div className="flex-shrink-0">
                                <svg className="h-5 w-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
                                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                                </svg>
                            </div>
                            <div className="ml-3">
                                <h3 className="text-sm font-medium text-blue-800">
                                    –î–µ–º–æ-—Ä–µ–∂–∏–º –≤—Ö–æ–¥–∞
                                </h3>
                                <div className="mt-2 text-sm text-blue-700">
                                    <p>
                                        –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π email –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.
                                        –î–ª—è production —Ä–µ–∂–∏–º–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Supabase.
                                    </p>
                                    <p className="mt-1">
                                        üìñ <strong>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</strong> PRODUCTION_SETUP.md
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                ) : (
                    <div className="bg-green-50 border border-green-200 rounded-md p-4">
                        <div className="flex">
                            <div className="flex-shrink-0">
                                <svg className="h-5 w-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
                                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                                </svg>
                            </div>
                            <div className="ml-3">
                                <h3 className="text-sm font-medium text-green-800">
                                    üöÄ Production —Ä–µ–∂–∏–º
                                </h3>
                                <div className="mt-2 text-sm text-green-700">
                                    <p>
                                        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É Supabase. Magic Link –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email.
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                )}

                <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
                    {/* Email –ø–æ–ª–µ */}
                    <div className="rounded-md shadow-sm -space-y-px">
                        <div>
                            <label htmlFor="email" className="sr-only">
                                Email –∞–¥—Ä–µ—Å
                            </label>
                            <input
                                id="email"
                                name="email"
                                type="email"
                                autoComplete="email"
                                required
                                className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                placeholder={isDemoMode() ? "Email –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: teacher@example.com)" : "–í–∞—à email –∞–¥—Ä–µ—Å"}
                                value={email}
                                onChange={(e) => setEmail(e.target.value)}
                            />
                        </div>
                    </div>

                    {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ) */}
                    {isDemoMode() && (
                        <div className="bg-gray-50 border border-gray-200 rounded-md p-4">
                            <h4 className="text-sm font-medium text-gray-700 mb-2">–ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ (–¥–µ–º–æ):</h4>
                            <div className="space-y-2">
                                <button
                                    type="button"
                                    onClick={() => setEmail('teacher@example.com')}
                                    className="w-full text-left px-3 py-2 text-sm bg-white border border-gray-200 rounded hover:bg-gray-50"
                                >
                                    üë®‚Äçüè´ teacher@example.com (–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å)
                                </button>
                                <button
                                    type="button"
                                    onClick={() => setEmail('student@example.com')}
                                    className="w-full text-left px-3 py-2 text-sm bg-white border border-gray-200 rounded hover:bg-gray-50"
                                >
                                    üë®‚Äçüéì student@example.com (–°—Ç—É–¥–µ–Ω—Ç)
                                </button>
                            </div>
                        </div>
                    )}

                    {/* –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ */}
                    <div>
                        <button
                            type="submit"
                            disabled={loading}
                            className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            {loading ? (
                                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" fill="none" viewBox="0 0 24 24">
                                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                            ) : null}
                            {loading ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º Magic Link...' :
                                isDemoMode() ? '–í–æ–π—Ç–∏ (–¥–µ–º–æ)' : '–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Magic Link'}
                        </button>
                    </div>

                    {/* –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö */}
                    {error && (
                        <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded">
                            {error}
                        </div>
                    )}

                    {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ */}
                    {success && (
                        <div className="bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded">
                            <div className="flex">
                                <div className="flex-shrink-0">
                                    <svg className="h-5 w-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
                                        <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                                    </svg>
                                </div>
                                <div className="ml-3">
                                    <h3 className="text-sm font-medium text-green-800">
                                        ‚úÖ {isDemoMode() ? '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è! (–¥–µ–º–æ)' : 'Magic Link –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!'}
                                    </h3>
                                    <div className="mt-2 text-sm text-green-700">
                                        <p>
                                            {isDemoMode()
                                                ? '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ Dashboard... –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –±—ã –ø–∏—Å—å–º–æ —Å —Å—Å—ã–ª–∫–æ–π.'
                                                : '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.'}
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}
                </form>

                {/* –°—Å—ã–ª–∫–∏ */}
                <div className="text-center space-y-2">
                    <p className="text-sm text-gray-600">
                        –ï—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?{' '}
                        <Link href="/signup" className="font-medium text-indigo-600 hover:text-indigo-500">
                            –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                        </Link>
                    </p>
                    <p className="text-sm text-gray-600">
                        <Link href="/" className="font-medium text-indigo-600 hover:text-indigo-500">
                            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
                        </Link>
                    </p>
                </div>
            </div>
        </div>
    );
}
