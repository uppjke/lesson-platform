import { supabase, IS_PRODUCTION } from './supabase';
import { mockSupabaseClient, getCurrentDemoUser, UserProfile } from './supabase-demo';

// –£–º–Ω—ã–π –∫–ª–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–µ–∂–∏–º
export const smartSupabaseClient = {
    auth: {
        async signInWithOtp(options: { email: string; options?: Record<string, unknown> }) {
            if (IS_PRODUCTION) {
                console.log('üöÄ PRODUCTION: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Magic Link');
                return await supabase.auth.signInWithOtp(options);
            } else {
                console.log('üé≠ DEMO: –°–∏–º—É–ª—è—Ü–∏—è Magic Link');
                return await mockSupabaseClient.auth.signInWithOtp(options);
            }
        },

        async getUser() {
            if (IS_PRODUCTION) {
                return await supabase.auth.getUser();
            } else {
                return await mockSupabaseClient.auth.getUser();
            }
        },

        async getSession() {
            if (IS_PRODUCTION) {
                return await supabase.auth.getSession();
            } else {
                return await mockSupabaseClient.auth.getSession();
            }
        },

        async signOut() {
            if (IS_PRODUCTION) {
                console.log('üöÄ PRODUCTION: –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
                return await supabase.auth.signOut();
            } else {
                console.log('üé≠ DEMO: –í—ã—Ö–æ–¥ –∏–∑ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞');
                return await mockSupabaseClient.auth.signOut();
            }
        },

        // –î–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
        async demoSignIn(email: string) {
            if (IS_PRODUCTION) {
                throw new Error('demoSignIn –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ production —Ä–µ–∂–∏–º–µ');
            }
            return await mockSupabaseClient.auth.demoSignIn(email);
        }
    },

    from: (table: string) => {
        if (IS_PRODUCTION) {
            return supabase.from(table);
        } else {
            return mockSupabaseClient.from(table);
        }
    }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏
export async function getUserProfile(): Promise<{ data: UserProfile | null, error: unknown }> {
    if (IS_PRODUCTION) {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) {
            return { data: null, error: { message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' } };
        }

        const { data, error } = await supabase
            .from('profiles')
            .select('*')
            .eq('id', user.id)
            .single();

        return { data, error };
    } else {
        const user = getCurrentDemoUser();
        return { data: user, error: null };
    }
}

export async function createUserProfile(email: string, role: 'student' | 'teacher', fullName?: string): Promise<{ data: UserProfile | null, error: unknown }> {
    if (IS_PRODUCTION) {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) {
            return { data: null, error: { message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' } };
        }

        const { data, error } = await supabase
            .from('profiles')
            .insert([
                {
                    id: user.id,
                    email,
                    role,
                    full_name: fullName || '',
                },
            ])
            .select()
            .single();

        return { data, error };
    } else {
        // –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ "–≤—Ö–æ–¥–µ"
        const user = getCurrentDemoUser();
        return { data: user, error: null };
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
export function isProductionMode(): boolean {
    return Boolean(IS_PRODUCTION);
}

export function isDemoMode(): boolean {
    return !Boolean(IS_PRODUCTION);
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤
export type { UserProfile } from './supabase-demo';
