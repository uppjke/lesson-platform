// –î–µ–º–æ-–∫–ª–∏–µ–Ω—Ç Supabase –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
export const mockSupabaseClient = {
    auth: {
        async signInWithOtp(options: { email: string; options?: any }) {
            console.log('üé≠ –î–ï–ú–û: –°–∏–º—É–ª—è—Ü–∏—è signInWithOtp');
            console.log('üìß Email:', options.email);
            console.log('‚öôÔ∏è Options:', options.options);

            // –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            return {
                data: { user: null, session: null },
                error: null
            };
        },

        async getUser() {
            return {
                data: { user: currentDemoUser },
                error: null
            };
        },

        async getSession() {
            return {
                data: { session: currentDemoSession },
                error: null
            };
        },

        async signOut() {
            console.log('üé≠ –î–ï–ú–û: –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
            currentDemoUser = null;
            currentDemoSession = null;
            return { error: null };
        },

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ-–≤—Ö–æ–¥–∞
        async demoSignIn(email: string) {
            console.log('üé≠ –î–ï–ú–û: –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è', email);
            
            const user = demoUsers[email];
            if (user) {
                currentDemoUser = user;
                currentDemoSession = {
                    access_token: 'demo-token',
                    user: user,
                    expires_at: Date.now() + 3600000 // 1 —á–∞—Å
                };
                
                console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª:', user);
                return { user, session: currentDemoSession, error: null };
            }
            
            return { user: null, session: null, error: { message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' } };
        }
    },

    from: (table: string) => ({
        select: () => ({
            limit: () => Promise.resolve({ data: [], error: null })
        }),
        insert: () => Promise.resolve({ data: null, error: null }),
        update: () => Promise.resolve({ data: null, error: null }),
        delete: () => Promise.resolve({ data: null, error: null })
    })
};

// –ü—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π –¥–ª—è –¥–µ–º–æ
let currentDemoUser: UserProfile | null = null;
let currentDemoSession: any = null;

// –î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
const demoUsers: Record<string, UserProfile> = {
  'teacher@example.com': {
    id: 'demo-teacher-1',
    email: 'teacher@example.com',
    role: 'teacher',
    full_name: '–ê–Ω–Ω–∞ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–≤–∞',
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  },
  'student@example.com': {
    id: 'demo-student-1', 
    email: 'student@example.com',
    role: 'student',
    full_name: '–ü–µ—Ç—Ä –°—Ç—É–¥–µ–Ω—Ç–æ–≤',
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  }
};

// –¢–∏–ø—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export interface UserProfile {
    id: string;
    email: string;
    role: 'student' | 'teacher';
    full_name?: string;
    created_at?: string;
    updated_at?: string;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
export function getCurrentDemoUser(): UserProfile | null {
  return currentDemoUser;
}

export function isDemoLoggedIn(): boolean {
  return currentDemoUser !== null;
}

export function getDemoUserRole(): 'student' | 'teacher' | null {
  return currentDemoUser?.role || null;
}
